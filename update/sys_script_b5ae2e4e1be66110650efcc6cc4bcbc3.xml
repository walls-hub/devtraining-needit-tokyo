<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>incident</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Assignment</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

var category = ["Network","Database","Hardware","Software","Inquiry/Help"];
var incidentThreshold = 3;
var currentDateTime = new GlideDateTime();
var currentDateString = currentDateTime.getDate().toString();

// Define a function to count the number of incidents for conditionthe 
function countIncidents(category, date) {
// object for the incident table
var incidentGr = new GlideRecord("incident");
incidentGr.addQuery("category", category);
incidentGr.addQuery("sys_created_on", ">=", date);
incidentGr.addQuery("sys_created_on", "<", date + " 23:59:59");
incidentGr.query();
// Count the number of incidents
var count = incidentGr.getRowCount();
return count;
}
	
for (var i = 0; i < category.length; i++){
if (countIncidents(category[i], currentDateString) > incidentThreshold) {
var problemGr = new GlideRecord("problem");
problemGr.initialize();
problemGr.setValue("category", category[i]);
problemGr.setValue("short_description", "Problem ticket for " + category[i] + " on " + currentDateString);
var problemSysId = problemGr.insert();
if (problemSysId) {
gs.addInfoMessage( problemGr.number + "Problem ticket created successfully for" + category[i]);
} else {
gs.error("Failed to create problem ticket");
}
} else {
gs.info("No problem ticket required");
}	
}

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-05-03 12:43:30</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>b5ae2e4e1be66110650efcc6cc4bcbc3</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name>Assignment</sys_name>
        <sys_overrides/>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_script_b5ae2e4e1be66110650efcc6cc4bcbc3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-05-03 12:56:54</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=b5ae2e4e1be66110650efcc6cc4bcbc3"/>
</record_update>
